@use 'sass:list';
@use 'sass:map';
@use '../config';
@use '../config/mixins' as m;
@use 'variables' as *;

@forward 'functions';
@forward 'variables';

$-utility-allowed: (
  font-size, font-weight, font-family, line-height, letter-spacing, text-indent,
  text-transform, word-spacing, word-break
);

$utils: () !default;
$responsive-utils: () !default;

$-finch-font-families: (
  sans-serif: $family\sans-serif,
  serif: $family\serif,
  cursive: $family\cursive,
  monospace: $family\monospace,
);
$font-families: () !default;
$-families: map.merge($-finch-font-families, $font-families);

$-finch-fonts: (
  body: $font\body,
  titles: $font\titles,
  lead: $font\lead,
  emphasis: $font\emphasis,
  bold: $font\bold,
  links: $font\links,
  code: $font\code,
  handwriting: $font\handwriting,
);
$fonts: () !default;
$-font-declarations: map.merge($-finch-fonts, $fonts);

/// USE FUNCTION
/// ----------
/// The use function is for setting a font from the branded 'font-declarations' map
/// @param $font-name {String} the name of one of the brand fonts, e.g. 'body'
/// @return {String|null} the value of the font (normal normal normal 16px/24px 'Open Sans')
/// @example
/// h1 {
///   font: typ.use(titles);
/// }
@function use($font-name) {
  $font: map.get($-font-declarations, $font-name);
  @if $font {
    @return $font;
  }

  @warn 'Could not find font for "#{$font-name}"';
  @return null;
}

/// /*  --------------------------------  *\
///  *  UTILITY CLASSES
/// \*  --------------------------------  */
///
/// The prop-values map provides a lookup for the values that should be used for each
/// typography property when iterating to create utility classes.
$-prop-values: (
  font-size: config.$modular-scale,
  font-weight: (normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900),
  font-family: $-families,
  line-height: config.$modular-scale,
  letter-spacing: config.$modular-scale\detail,
  text-align: (left, center, right, start, end, justify, match-parent),
  text-indent: config.$modular-scale,
  text-transform: (none, capitalize, uppercase, lowercase, full-width, full-size-kana),
  word-spacing: config.$modular-scale,
  word-break: (normal, break-all, keep-all),
);

@each $prop in $utils {
  @if list.index($-utility-allowed, $prop) {
    @include m.gen-utils($prop, map.get($-prop-values, $prop));
  }
}

@each $prop in $responsive-utils {
  @if list.index($-utility-allowed, $prop) {
    @include m.gen-utils($prop, map.get($-prop-values, $prop), $responsive: true);
  }
}