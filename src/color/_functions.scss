@use 'sass:color';
@use 'sass:map';
@use 'sass:math';

/// CREATE SHADES
/// ----------
/// A color function that generates a map for a given color, using the initial value as a base and
/// adjusting the lightness to create values from `0` - `1000` in increments of 100.
/// The original colour will be included twice in the map. Once according to it's lightness, and once
/// under the key of `base`, for ease of reference.
///
/// @param $clr {Color} any color value that will be used to calculate the rest of the map.
/// @return {Map} an map of color values assigned to numbers 0, 100, 200...900, 1000.
///
@function create-shades($clr) {
  // initialise map with a single key, meaning the original colour can always be accessed at `base`.
  $shades: (base: $clr);
  // get initial values of the color's lightness and, from that, its "index".
  // I.e., a color with lightness `60%` would create an `$init: 6`.
  $lightness: color.lightness($clr);
  $init: math.floor(math.div($lightness, 10%));

  // set counter variables
  //$index: $init;
  //$iteration-count: 0;

  @for $i from 0 through 10 {
    $key: $i * 100;
    $value: color.adjust($clr, $lightness: -10% * ($init - $i));
    $shades: map.set($shades, $key, $value);
  }
  // loop until we reach 0, setting map items for each value as we go.
  // we remove 10% more from the lightness on each loop, thanks to the counter variable.
  //@while $index > -1 {
  //  $key: $index * 100;
  //  $value: color.adjust($clr, $lightness: -10% * $iteration-count);
  //  $shades: map.set($shades, $key, $value);
  //  $index: $index - 1;
  //  $counter: $iteration-count + 1;
  //}

  // reassign the counter variables so we can start counting from the initial value again.
  // we add 10% more to the lightness on each loop, thanks to the counter variable.
  //$index: $init + 1;
  //$counter: 1;
  //@while $index < 11 {
  //  $key: $index * 100;
  //  $value: color.adjust($clr, $lightness: 10% * $counter);
  //  $shades: map.set($shades, $key, $value);
  //  $index: $index + 1;
  //  $counter: $counter + 1;
  //}

  @return $shades;
}