@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'string' as str;
@use '../config';

/* -------------------------------- *\
   FILE INDEX
\* -------------------------------- */

/*
 *  1. map-get-nth: return the value of a map item at a given index.
 *  2. map-index: return the index in a map of a given item.
 *  3. map-get-next: return the value of a map item that is the next key from the given key.
 *  4. map-get-prev: return the value of a map item that is the previous key from the given key.
 *  5. map-concat: return a string representation of a map.
 *  6. map-set-keys: set multiple keys in a map to a common value.
 *  7. map-set-many: similar to map-set-keys, but rather than giving a list of keys, you give a 'search term', and any key that matches will be set.
 *
 */

/// MAP GET NTH
/// ----------
/// The `map-get-nth` function returns the value of a map item located at a
/// given index. This differs to Sass's built-in `map.get` function, which
/// allows you to access a map value by its key.
/// @param $map {Map} the map that is to be searched
/// @param $index {Number} the position in the map from which the value should be returned
/// @return {any|null} the value of the map item, or `null` if the index is out of bounds
///
/// @example map-get-nth((a: first, b: second, c: third), 2) // second
@function map-get-nth($map, $index) {
  // type safety
  @if meta.type-of($map) != map { @error 'First argument `$map` must be of type "map"'; }
  @if meta.type-of($index) != number { @error 'Second argument `$index` must be of type "number"'; }

  $keys: map.keys($map);
  $target: list.nth($keys, $index);
  @if not $target {
    @warn 'Cannot get - no map item found at index "#{$index}"';
    @return null;
  }

  @return map.get($map, $target);
}

@if config.$debug {
  @debug "@function map-get-nth: #{map-get-nth((a: first, b: second), 2)}"; // expect 'second'
  @debug "----------";
}

/// MAP INDEX
/// ----------
/// The `map-index` function returns the index of a given item in a map. The
/// target item can be identified either by key, or value.
/// @param $map {Map} the map that is to be searched
/// @param $item {any} the search term - either a key or value in the map
/// @param $search {key|value} whether the map's keys or values should be searched
/// @return {Number|null} the index of the target item, or null if the search term isn't found
///
/// @example map-index((a: first, b: second, c: third), c) // 3
@function map-index($map, $item, $search: key) {
  // type safety
  @if meta.type-of($map) != map { @error 'First argument `$map` must be of type "map"'; }

  // validate the `$search` param
  @if $search != key and $search != value { @error 'Third argument `$search` must be one of "key" or "value"'; }

  $items: ();
  @if $search == key {
    $items: map.keys($map);
  } @else if $search == value {
    $items: map.values($map);
  }

  $index: list.index($items, $item);
  @if not $index {
    @warn 'Map does not have any item for #{$search} "#{$item}"';
    @return null;
  }
  @return $index;
}

@if config.$debug {
  @debug "@function map-index: #{map-index((a: first, b: second, c: third), b)}"; // expect 2
  @debug "@function map-index: #{map-index((a: first, b: second, c: third), third, $search: value)}"; // expect 3
  @debug "----------";
}

/// MAP GET NEXT
/// ----------
/// The `map-get-next` function returns the value of the next item in a map, relative
/// to a specified start, which can be found either by key or value.
/// @param $map {Map} the map that is to be searched
/// @param $current {any} the starting point, either a map key or value
/// @param $search {key|value} how the search should be performed
/// @return {any}
///
/// @example map-get-next((a: 1, b: 2, c: 3, d: 4), b); // expect 3
@function map-get-next($map, $current, $search: key) {
  // type safety
  @if meta.type-of($map) != map { @error 'First argument `$map` must be of type "map"'; }

  // get index of the current item
  // we don't validate the `$search` param here, as we'll get the warning from `map-index` anyway
  $index: map-index($map, $current, $search);
  $target: $index + 1;
  // handle wrapping
  @if $index == list.length(map.keys($map)) {
    $target: 1;
  }
  // return the value of the next item
  @return map-get-nth($map, $target);
}

@if config.$debug {
  @debug "@function map-get-next: #{map-get-next((a: first, b: second, c: third), b)}"; // expect 'third'
  @debug "@function map-get-next: #{map-get-next((a: first, b: second, c: third), first, $search: value)}"; // expect 'second'
  @debug "@function map-get-next: #{map-get-next((a: first, b: second, c: third), c)}"; // expect 'first'
  @debug "----------";
}

/// MAP GET PREV
@function map-get-prev($map, $current, $search: key) {
  // type safety
  @if meta.type-of($map) != map { @error 'First argument `$map` must be of type "map"'; }

  // get index of the current item
  // we don't validate the `$search` param here as we'll get the warning from `map-index` anyway
  $index: map-index($map, $current, $search);
  $target: $index - 1;
  // handle wrapping
  @if $index == 1 {
    $target: list.length(map.keys($map));
  }
  // return the value of the previous item
  @return map-get-nth($map, $target);
}

@if config.$debug {
  @debug "@function map-get-prev: #{map-get-prev((a: first, b: second), b)}"; // expect 'first'
  @debug "@function map-get-prev: #{map-get-prev((a: first, b: second), second, $search: value)}"; // expect 'first'
  @debug "@function map-get-prev: #{map-get-prev((a: first, b: second), a)}"; // expect 'second'
  @debug "----------";
}

/// MAP CONCAT
/// ----------
/// The `map-concat` function returns a string representation of a map.
/// This can optionally include the keys, which will be joined to their value
/// by a specified 'glue'.
/// @param $map {Map} the map that is to be concatenated
/// @param $keys {Boolean} whether or not the map keys should be included in the string output
/// @param $glue {String|null} an optional string or character that will be used to join a map key
/// with its value in the output string
/// @return {String}
///
/// @example map-concat((a: first, b: second), $glue: "-") // first-second
@function map-concat($map, $keys: false, $separator: null, $glue: " ") {
  // type safety
  @if meta.type-of($map) != map { @error 'First argument `$map` must be of type "map"'; }
  @if meta.type-of($keys) != bool { @error 'Second argument `$keys` must be of type "bool"'; }

  $result: "";
  @each $key, $value in $map {
    $current: #{$value};
    @if $keys {
      $current: #{$key}#{$glue}#{$value};
    }

    @if $separator and string.length($result) > 0 {
      $result: #{$result}#{$separator}#{$current};
    } @else {
      $result: #{$result}#{$current};
    }
  }

  @return $result;
}

@if config.$debug {
  @debug "@function map-concat: #{map-concat((a: first, b: second))}"; // expect firstsecond
  @debug "@function map-concat: #{map-concat((a: first, b: second), $separator: '-')}"; // expect first-second
  @debug "@function map-concat: #{map-concat((a: first, b: second), $keys: true, $separator: ', ', $glue: '-')}"; // expect a-first, b-second
  @debug "@function map-concat: #{map-concat((transform: .2s linear, color: .25s ease-out), $keys: true, $separator: ', ', $glue: ' ')}"; // expect 'transform .2s linear, color .25s ease-out'
  @debug "----------";
}

/// MAP SET KEYS
/// ----------
/// The `map-set-keys` function sets multiple keys in a map to a common value. The keys are specified
/// in a list that is passed to the function.
/// @param $map {Map} the map that is to be acted on
/// @param $keys {List} a list of keys that should be updated
/// @param $value {any} the value to which all `$keys` should be set
/// @return {Map}
///
/// @example map-set-keys((a: first, b: second, c: third), (a, c), finch); // (a: finch, b: second, c: finch)
@function map-set-keys($map, $keys, $value) {
  // type safety
  @if meta.type-of($map) != map { @error 'First argument `$map` must be of type "map"'; }
  @if meta.type-of($keys) != list { @error 'Second argument `$keys` must be of type "list"'; }

  // if there's only one item in the `$keys` list, it's a bit pointless to use this function
  // just use map.set, or map.merge etc instead...
  // but we still carry on and give the developer the desired result...
  @if list.length($keys) < 2 {
    @warn 'The `$keys` list you\'ve provided only contains one item - consider using one of Sass\'s built-in map methods to set this value instead';
  }

  $result: ();
  @each $key, $val in $map {
    @if list.index($keys, $key) {
      // if the current key is in the 'keys' list, we use the given `$value`
      $result: map.set($result, $key, $value);
    } @else {
      // otherwise, we use the original value: `$val`
      $result: map.set($result, $key, $val);
    }
  }

  @return $result;
}

// @warn seems to be some sort of sass compiler bug here, if I try and interpolate this function value, it
// throws an error.
@if config.$debug {
  @debug map-set-keys((a: first, b: second, c: third), (a, c), test); // expect (a: test, b: second, c: test);
  @debug "----------";
}

/// MAP SET MANY
/// ----------
/// The `map-set-many` function sets multiple keys in a map to a common value. The keys that should be
/// updated are specified by providing a 'search' term; any key that matches this term will be updated.
/// For example, passing `$match: border` would mean all keys `border`, `border-top-width`, `border-radius`...
/// would be updated.
/// @param $map {Map} the map that is to be acted on
/// @param $match {String} the search term that should be used to filter the keys
/// @param $value {any} the value to which all of the matching keys should be set
/// @return {Map}
///
/// @example map-set-many((border-top-width: 2px, background-color: red, border-bottom-width: 3px), border, .25rem); // (border-top-width: .25rem, background-color: red, border-bottom-width: .25rem);
@function map-set-many($map, $match, $value) {
  // type safety
  @if meta.type-of($map) != map { @error 'First argument `$map` must be of type "map"'; }

  $result: ();
  @each $key, $val in $map {
    @if str.match($key, $match) {
      $result: map.set($result, $key, $value);
    } @else {
      $result: map.set($result, $key, $val);
    }
  }

  @return $result;
}

@if config.$debug {
  @debug map-set-many((border: false, background: false, border-width: false), border, true);
  @debug "----------";
}
