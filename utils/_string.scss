@use 'sass:meta';
@use 'sass:string';
@use '../config';

/* -------------------------------- *\
   FILE INDEX
\* -------------------------------- */

/*
 *  1. slugify: convert a string into a machine-readable format.
 *  2. normalize: convert any value of any type into a lowercase string.
 *  3. match: test a needle against a haystack.
 *  4. replace: replace a portion of a string with a given value.
 *  5. char-at: return the character at a given position.
 *
 */

/// SLUGIFY
/// ----------
/// The `slugify` function converts a given value into a machine-readable string,
/// this is basically done by converting it to lowercase and replacing any
/// spaces with a specified 'glue'.
/// @param $value {String} the string that is to be slugified
/// @param $glue {String} the string or character that should be used to replace spaces
/// @param $encode {Boolean} whether or not "special characters" should be url encoded
/// @return {String}
///
/// @example slugify("This is Finch") // "this-is-finch"
@function slugify($value, $glue: '-') {
  // type safety
  @if meta.type-of($value) != string { @error 'First argument `$value` must be of type "string"'; }
  @if meta.type-of($glue) != string { @error 'Second argument `$value` must be of type "stirng"'; }

  // cast the value to lower case
  $value: string.to-lower-case($value);

  $result: "";
  // parse the string - step through one character at a time and if it's a 'space',
  // use the `$glue` instead.
  @for $i from 1 through string.length($value) {
    $char: string.slice($value, $i, $i);
    @if $char == " " {
      $char: $glue;
    }

    $result: #{$result}#{$char};
  }

  @return $result;
}

@if config.$debug {
  @debug "@function slugify: #{slugify('Hello Finch')}"; // expect "hello-finch"
  @debug "@function slugify: #{slugify('Hello Finch', '_')}"; // expect "hello_finch"
  @debug "----------";
}

/// NORMALIZE
/// ----------
/// The `normalize` function converts a given value to a lowercase string,
/// useful to ensure consistency for comparisons etc.
/// @param $value {any} the value that is to be transformed
/// @return {String}
///
/// @example normalize("Finch Sass") // "finch sass"
@function normalize($value) {
  // string interpolation (the #{} syntax) handles the type conversion.
  @return string.to-lower-case(#{$value});
}

@if config.$debug {
  @debug "@function normalize: #{normalize(400)}"; // expect "400"
  @debug "@function normalize: #{normalize("Finch Sass")}"; // expect "finch sass"
  @debug "----------";
}

/// MATCH
/// ----------
/// The `match` function checks for equality between two items. By default,
/// partial, case-insensitive matches will be considered a 'hit', but the
/// function can also run in 'exact' mode, whereby it will only return `true`
/// when the match is exact.
/// Note that type matching is *not* a part of this implementation, i.e. comparing
/// the number 3 with the string "3" will return true, even when `$exact: true`.
/// @param $haystack {any} the item that is to be compared to
/// @param $needle {any} the item that is to be checked for
/// @param $exact {Boolean} whether or not partial, case-insensitive matches should be counted
/// @return {Boolean}
///
/// @example match("finch-sass", "sass") // true
@function match($haystack, $needle, $exact: false) {
  // type safety
  @if meta.type-of($exact) != bool { @error 'Third argument `$exact` must be of type "bool"'; }

  // normalise the values
  // to compare the values, we want to coerce them both to
  // being strings, we also 'lower case' them so case insensitive
  // matching works out of the box.
  // @todo - consider making case sensitivity configurable with a function param
  $haystack: normalize($haystack);
  $needle: normalize($needle);

  @if $exact {
    @return $needle == $haystack;
  }

  $match: string.index($haystack, $needle);
  @return $match and $match > 0;
}

@if config.$debug {
  @debug "@function match: #{match(a, a)}"; // expect true
  @debug "@function match: #{match(43, "43")}"; // expect true
  @debug "@function match: #{match(143, "4")}"; // expect true
  @debug "@function match: #{match(143, "4", $exact: true)}"; // expect false
  @debug "----------";
}

/// REPLACE
/// ----------
/// The `replace` function creates a new string that is a copy of the original,
/// but with all instances of a given character replaced.
/// @param $string {String} the string that is to be acted on
/// @param $target {String} the character that is to be replaced
/// @param $value {String} the replacement character
/// @return {String}
///
/// @example replace("finch-sass", "a", "c") // expect "finch-scss"
@function replace($string, $target, $value, $global: true) {
  // find index of $target in $string, this will give us the starting index
  // the ending index will be starting index + length of string
  $start: string.index($string, $target);
  $end: $start + string.length($target);
  @if not $start { @return null; }

  // no point carrying on if the target isn't in the string at all
  @if not match($string, $target) {
    @warn 'Nothing to replace - the specified target doesn\'t exist in the given string';
    @return $string;
  }

  // initialise an empty string
  $result: "";
  // $initial is the portion of the string before and upto the $target value
  $initial: string.slice($string, 1, $start - 1);
  // $terminal is the portion of the string after and from the $target value
  $terminal: string.slice($string, $end);
  // construct the new string and then check if the $target is still present,
  // in which case, call `replace` recursively.
  $result: #{$initial}#{$value}#{$terminal};
  $start: string.index($result, $target);
  @if string.index($result, $target) and $global {
    $result: replace($result, $target, $value);
  }

  @return $result;
}

@if config.$debug {
  @debug "@function replace: #{replace("finch-sass", "a", "c")}"; // expect "finch-sass"
  @debug "@function replace: #{replace("finch-scss", "c", "a")}"; // expect "finah-sass"
  @debug "@function replace: #{replace("finch-sass", "sass", "styles")}"; // expect "finch-styles"
  @debug "@function replace: #{replace("finch-color-module", "color", "layout")}"; // expect "finch-typography-module"
  @debug "@function replace: #{replace("finah-sass", "a", "c", $global: false)}"; // expect "finch-sass"
  @debug "----------";
}

/// CHAR AT
/// ----------
/// The `char-at` function returns that character at a specified position in a string
/// @param $string {String} the string that is to be read
/// @param $index {Number} the position in the string from which the character should be read
/// @return {String} a single character
///
/// @example char-at(finch, 4) // 'c'
@function char-at($string, $index) {
  // type safety
  @if meta.type-of($string) != string { @error 'First argument `$string` must be of type "string"'; }
  @if meta.type-of($index) != number { @error 'Second argument `$index` must be of type "number"'; }

  // validate the `$index`
  @if $index < 1 or $index > string.length($string) {
    @warn 'No character there - the given index is not in the range of the given string';
    @return null;
  }

  // read one character from the given index
  @return string.slice($string, $index, $index);
}

@if config.$debug {
  @debug "@function char-at: #{char-at('finch', 3)}"; // expect 'n'
  @debug "----------";
}
