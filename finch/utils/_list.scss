@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';
@use 'string';
@use '../config';

/* -------------------------------- *\
   FILE INDEX
\* -------------------------------- */

/*
 *  1. list-reverse: return a new list with the contents of the original list in reverse order.
 *  2. list-concat: return a string representation of a list (the list items all joined together).
 *  3. list-last-index: return the index of the final time a given item appears in a list.
 *  4. list-prepend: return a new list with the given item(s) added to the *start* of the original list.
 *  5. list-insert: add an item at a specified index. This does not replace the current item and will therefore increase the list length by 1.
 *  6. list-remove: removes a given item from a list - can also work recursively to remove the item from all nested lists.
 *  7. list-remove-nth: removes the item at the specified index - this will have the side affect of decreasing the list length by 1.
 *  8. list-replace: replace all instances of a target with a given item - can also work recursively to replace the item within all nested lists.
 *  9. list-replace-nth: replace the item at a specified index.
 * 10. list-slice: return a new list that is a subset of the old list, determined by a 'start' and 'end' index.
 * 11. list-shift: move all items of a list by a specified interval, e.g. `$interval: 1` would move everything one place to the right, with the last item wrapping to the beginning.
 * 12. list-has: checks if a list contains a given item. This can work recursively, to check all nested lists, and 'fuzzy' to check for inexact matches.
 * 13. @todo list-filter
 * 14. @todo list-map
 *
 */

/// [ 1 ]
/// LIST REVERSE
/// ----------
/// The `list-reverse` function takes a list and returns a new list that has the
/// same items but in the reverse order (the first becomes last etc).
/// @param $list {List} the list that is to be reversed.
/// @param $recursive {Boolean} whether or not nested lists should also be reversed.
/// @return {List} a new list with the items in reverse order.
///
/// @example list-reverse((1, 2, 3)) // (3, 2, 1)
@function list-reverse($list, $recursive: false) {
  // type-safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }
  @if meta.type-of($recursive) != bool { @error 'Second argument `$recursive` must be of type "bool"'; }

  // no point carrying on if there's only 1 item in the list...
  @if list.length($list) == 1 {
    @warn "Nothing to reverse - the list you provided only has 1 item in it";
    @return $list;
  }

  $result: ();
  @for $i from list.length($list) through 1 {
    $current: list.nth($list, $i);
    @if meta.type-of($current) == list and $recursive {
      $current: list-reverse($current, $recursive);
    }
    $result: list.append($result, $current, $separator: comma);
  }

  @return $result;
}

@if config.$debug {
  @debug "@function list-reverse: #{list-reverse((1, 2, 3))}"; // expect (3, 2, 1)
  @debug "@function list-reverse: #{list-reverse((1, (1, 2), 3))}"; // expect (3, (1, 2), 1)
  @debug "@function list-reverse: #{list-reverse((1, (1, 2), 3), true)}"; // expect (3, (2, 1), 1)
  @debug "----------";
}

/// [ 2 ]
/// LIST CONCAT
/// ----------
/// The `list-concat` function takes a list and joins all items together into a string
/// representation, optionally separated by a designated 'separator'.
/// @param $list {List} the list that is to be concatenated
/// @param $separator {String} @default null. Any string interpolated between each list item.
/// @return {String} the joined list items.
///
/// @example list-concat((1, 2, 3)) // 123
/// @example list-concat((a, b, c), "-") // a-b-c
@function list-concat($list, $separator: null) {
  // type safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }

  // no point continuing if list only has 1 item in it...
  @if list.length($list) == 1 {
    @warn "Nothing to concatenate - the list you provided only has 1 item in it";
    @return $list;
  }

  $value: null;
  @each $item in $list {
    @if $separator and list.index($list, $item) != 1 {
      $value: #{$value}#{$separator}#{$item};
    } @else {
      $value: #{$value}#{$item};
    }
  }

  @return $value;
}

@if config.$debug {
  @debug "@function list-concat: #{list-concat((1, 2, 3))}"; // expect 123
  @debug "@function list-concat: #{list-concat((a, b, c), '-')}"; // expect a-b-c
  @debug "----------";
}

/// [ 3 ]
/// LIST LAST INDEX
/// ----------
/// The `list-last-index` function returns the index of the final occurrence
/// of the given item, or `null` if the item isn't found at all.
/// @param $list {List} the list that is to be searched
/// @param $item {any} the item that is to be searched for
/// @return {Number|null}
///
/// @example list-list-index((1, 2, 3, 2, 5), 2) // 4
@function list-last-index($list, $item) {
  // type safety
  @if meta.type-of($list) != list { @error 'First agument `$list` must be of type "list"'; }

  @for $i from list.length($list) through 1 {
    @if list.nth($list, $i) == $item {
      @return $i;
    }
  }

  @warn "Item not in list";
  @return null;
}

@if config.$debug {
  @debug "@function list-last-index: #{list-last-index((1, 2, 3, 4), 3)}"; // expect 3
  @debug "@function list-last-index: #{list-last-index((1, 2, 3, 2, 5), 2)}"; // expect 4
  @debug "----------";
}

/// [ 4 ]
/// LIST PREPEND
/// ----------
/// The `list-prepend` function creates a new list with the given item added to the *start*
/// of the given list.
/// @param $list {List} the list that is to be prepended to
/// @param $item {any} the item that is to be added to the start of the list
/// @return {List}
///
/// @example list-prepend((1, 2), 3) // (3, 1, 2)
@function list-prepend($list, $item) {
  // type safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }
  @return list.join($item, $list);
}

@if config.$debug {
  @debug "@function list-prepend: #{list-prepend((1, 2, 3), 0)}"; // expect (0, 1, 2, 3)
  @debug "@function list-prepend: #{list-prepend((1, 2, 3), (0, 5))}"; // expect (0, 5, 1, 2, 3)
  @debug "----------";
}

/// [ 5 ]
/// LIST INSERT
/// ----------
/// The `list-insert` function adds an item to a list at a specified index. If no
/// index is given, the item is simply added to the end of the list. Note that the
/// existing item at the specified index is *not* replaced, but rather moved, and the
/// list length will therefore increase by 1 when using this function.
/// @param $list {List} the list into which the item should be inserted
/// @param $item {any} the item that is to be inserted into the list
/// @param $index {Number} the position at which the item should be added
/// @return {List}
///
/// @example list-insert((1, 2, 3), 4, 2) // (1, 4, 2, 3)
@function list-insert($list, $item, $index: null) {
  // type safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }
  @if $index and meta.type-of($index) != number { @error "Third argument `$index` must be a number, or `null`"; }

  // if `$index` is not in the range of the list length, there's no point
  // using this function - something like 'append', 'prepend', 'join' etc will
  // do the trick instead:
  @if $index and ($index < 1 or $index > list.length($list)) {
    @warn 'You passed an `$index` that is outside of the list\'s range - consider using a different function to join lists, or append an item to the end';
  }

  @if $index == null {
    $index: list.length($list) + 1;
  }

  $result: ();
  @for $i from 1 through list.length($list) {
    @if $i == $index {
      $result: list.append($result, $item);
    }

    $result: list.append($result, list.nth($list, $i));
  }

  @return $result;
}

@if config.$debug {
  @debug "@function list-insert: #{list-insert((1, 2, 3), 4)}"; // expect (1, 2, 3, 4)
  @debug "@function list-insert: #{list-insert((1, 2, 3), 4, 2)}"; // expect (1, 4, 2, 3)
  @debug "@function list-insert: #{list-insert((1, 2, 3), (4, 5), 3)}"; // expect (1, 2, (4, 5), 3)
  @debug "----------";
}

/// [ 6 ]
/// LIST REMOVE
/// ----------
/// The `list-remove` function creates a new list that does *not* contain a specified
/// item. Note that *all instances* of the item will be removed. The function can also
/// work recursively, to the remove the item from all nested lists.
/// @param $list {List} the list from which the item should be removed
/// @param $target {any} the item that is to be removed from the list
/// @param $recursive {Boolean} whether or not the target should be removed from any nested lists
/// @return {List}
///
/// @example list-remove((1, 2, 3), 2) // (1, 3)
@function list-remove($list, $target, $recursive: false) {
  // type safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }
  @if meta.type-of($recursive) != bool { @error 'Third argument `$recursive` must be of type "bool"'; }

  // no point carrying on if the target item is not in the list at all
  @if not list-has($list, $target, $recursive) {
    @warn 'Nothing to remove - the given list does not contain the target item';
    @return $list;
  }

  $result: ();
  @for $i from 1 through list.length($list) {
    $current: list.nth($list, $i);
    @if meta.type-of($current) == list and $recursive {
      $result: list.append($result, list-remove($current, $target, $recursive));
    } @else if $current != $target {
      $result: list.append($result, $current);
    }
  }

  @return $result;
}

@if config.$debug {
  @debug "@function list-remove: #{list-remove((1, 2, 3), 2)}"; // expect (1, 3)
  @debug "@function list-remove: #{list-remove((a, b, c, d, a, b), a)}"; // expect (b, c, d, b)
  @debug "@function list-remove: #{list-remove((a, b, c, (c, d), e), c)}"; // expect (a, b, (c, d), e)
  @debug "@function list-remove: #{list-remove((a, b, c, (c, d), e), c, true)}"; // expect (a, b, d, e)
  @debug "----------";
}

/// [ 7 ]
/// LIST REMOVE NTH
/// ----------
/// The `list-remove-nth` function removes the item at a given index.
/// Note, this will have the side affect of decreasing the list length by 1.
/// @param $list {List} the list from which the item should be removed
/// @param $index {Number} the position from which the item should be removed
/// @return {List}
///
/// @example list-remove-nth((a, b, c, d), 3) // (a, b, d)
@function list-remove-nth($list, $index) {
  // type safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }
  @if meta.type-of($index) != number { @error 'Second argument `$index` must be of type "number"'; }

  // can't remove an item at an index that is outside of the list range
  @if $index < 1 or $index > list.length($list) {
    @warn "Nothing to remove - the given index is not within the range of the given list";
    @return $list;
  }

  $result: ();
  @for $i from 1 through list.length($list) {
    @if $i != $index {
      $result: list.append($result, list.nth($list, $i));
    }
  }

  @return $result;
}

@if config.$debug {
  @debug "@function list-remove-nth: #{list-remove-nth((a, b, c, d), 3)}"; // expect (a, b, d)
  @debug "----------";
}

/// [ 8 ]
/// LIST REPLACE
/// ----------
/// The `list-replace` function replaces a specified item with a given replacement.
/// Note that all instances of the item will be replaced, and that the function can
/// also work recursively, to replace the item in all nested lists.
/// @param $list {List} the list in which the item should be replaced
/// @param $target {any} the item that should be replaced
/// @param $item {any} the item that should be used as the replacement value
/// @param $recursive {Boolean} whether or not the target should be replaced in any nested lists
///
/// @example list-replace((a, b, c), b, x) // (a, x, c)
@function list-replace($list, $target, $item, $recursive: false) {
  // type safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }
  @if meta.type-of($recursive) != bool { @error 'Fourth argument `$recursive` must be of type "bool"'; }

  // no point trying to replace something that doesn't exist...
  @if not list-has($list, $target, $recursive) {
    @warn 'Nothing to replace - the specified target was not found in the specified list';
    @return $list;
  }

  $result: ();
  @for $i from 1 through list.length($list) {
    $current: list.nth($list, $i);
    @if meta.type-of($current) == list and $recursive {
      $result: list.append($result, list-replace($current, $target, $item, $recursive));
    } @else if $current == $target {
      $result: list.append($result, $item);
    } @else {
      $result: list.append($result, $current);
    }
  }

  @return $result;
}

@if config.$debug {
  @debug "@function list-replace: #{list-replace((1, 2, 3), 2, 5)}"; // expect (1, 5, 3)
  @debug "@function list-replace: #{list-replace((1, 2, 3, 2, 5), 2, 4)}"; // expect (1, 4, 3, 4, 5)
  @debug "@function list-replace: #{list-replace((1, 2, (2, 3), 4, 2), 2, 8)}"; // expect (1, 8, (2, 3), 4, 8)
  @debug "@function list-replace: #{list-replace((1, 2, (2, 3), 4, 2), 2, 8, true)}"; // expect(1, 8, (8, 3), 4, 8)
  @debug "----------";
}

/// [ 9 ]
/// LIST REPLACE NTH
/// ----------
/// The `list-replace-nth` function replaces a list item at a specified index.
/// @param $list {List} the list in which the item should be replaced
/// @param $index {Number} the position in the list of the target item, which will be replaced
/// @param $item {any} the item that will be used as the replacement value
/// @return {List}
///
/// @example list-replace-nth((a, b, c, d), 3, x) // (a, b, x, d)
@function list-replace-nth($list, $index, $item) {
  // type safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }
  @if meta.type-of($index) != number { @error 'Second argument `$index` must be of type "number"'; }

  // can't replace something at a location that's not in the list...
  @if $index < 1 or $index > list.length($list) {
    @warn 'Nothing to replace - can\'t replace an item at index "#{$index}" as that is outside of the range of the given list';
    @return $list;
  }

  $result: ();
  @for $i from 1 through list.length($list) {
    @if $i == $index {
      $result: list.append($result, $item);
    } @else {
      $result: list.append($result, list.nth($list, $i));
    }
  }

  @return $result;
}

@if config.$debug {
  @debug "@function list-replace-nth: #{list-replace-nth((a, b, c, d), 2, x)}"; // expect (a, x, c, d)
  @debug "----------";
}

/// [ 10 ]
/// LIST SLICE
/// ----------
/// The `list-slice` function creates a new list that is a subset of the given list,
/// defined by a start and end index.
/// @param $list {List} the list from which the new list is to be created
/// @param $start {Number} the index at which the slice should begin - defaults to `1` (the beginning of the list)
/// @param $end {Number} the index at which the slice should stop - defaults to the end of the list
/// @return {List}
///
/// @example list-slice((a, b, c, d, e), 2, 4) // (b, c, d)
@function list-slice($list, $start: 1, $end: list.length($list)) {
  // type safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }
  @if meta.type-of($start) != number { @error 'Second argument `$start` must be of type "number"'; }
  @if meta.type-of($end) != number { @error 'Third argument `$end` must be of type "number"'; }

  // cannot slice list if start or end indices are out of range...
  @if $start < 1 or $start > list.length($list) {
    @warn 'Cannot slice - the start index is outside of the range of the list';
    @return $list;
  }

  @if $end < 1 or $end < $start or $end > list.length($list) {
    @warn 'Cannot slice - the end index is either smaller than start, or outside of the range of the list';
    @return $list;
  }

  $result: ();
  @for $i from $start through $end {
    $result: list.append($result, list.nth($list, $i));
  }

  @return $result;
}

@if config.$debug {
  @debug "@function list-slice: #{list-slice((a, b, c, d, e), $end: 3)}"; // expect (a, b, c)
  @debug "@function list-slice: #{list-slice((a, b, c, d, e), 2, 4)}"; // expect (b, c, d)
  @debug "@function list-slice: #{list-slice((a, b, c, d, e), 4)}"; // expect (d, e)
  @debug "----------";
}

/// [ 11 ]
/// LIST SHIFT
/// ----------
/// The `list-shift` function moves the items in a list by a given interval. The list items will
/// 'wrap' accordingly, so the last item will be pushed to the beginning, or the first item will
/// be pushed to the end as required.
/// @param $list {List} the list that is to be operated on
/// @param $interval {Number} the number of spaces by which the list should be shifted
/// @return {List}
///
/// @example list-shift((a, b, c, d), 2) // (c, d, a, b)
@function list-shift($list, $interval: 1) {
  // type safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }
  @if meta.type-of($interval) != number { @error 'Second argument `$interval` must be of type number'; }

  // no point carrying on if interval is 0, as that would leave the list in place anyway...
  @if $interval == 0 {
    @warn 'Nothing to shift - you passed an interval of 0';
    @return $list;
  }

  $result: ();
  @for $i from 0 to list.length($list) {
    // brief explanation of the maths below.
    // Turns out Sass modulo operator uses a 'floored' modulo when the dividend
    // is negative. This means that, for example, -1 % 6 = 5 (because -1 = 6 * (-1) + 5).
    // Calculating the index in this way means the 'wrapping' from end - start of the list
    // (or vice versa) happens naturally.
    $target: ($i - $interval) % list.length($list) + 1;
    $result: list.append($result, list.nth($list, $target));
  }

  @return $result;
}

@if config.$debug {
  @debug "@function list-shift: #{list-shift((1, 2, 3, 4))}"; // expect (4, 1, 2, 3)
  @debug "@function list-shift: #{list-shift((1, 2, 3, 4), 3)}"; // expect (2, 3, 4, 1)
  @debug "@function list-shift: #{list-shift((a, b, c, d), -2)}"; // expect (c, d, a, b)
  @debug "----------";
}

/// [ 12 ]
/// LIST HAS
/// ----------
/// The `list-has` function determines whether or not a list contains a given item.
/// Note that, by default, the function will look for an exact match, but can work in
/// `fuzzy` mode, where partial, case-insensitive matches will be counted, and can also
/// work recursively, so all nested lists will also be checked.
/// @param $list {List} the list that is to be searched
/// @param $query {any} the item that is to be searched for
/// @param $recursive {Boolean} whether or not nested lists should be searched
/// @param $fuzzy {Boolean} whether or not partial, case-insensitive matches should be counted
/// @return {Number|List|null} if the item is found, we return its index, however, if it is found
/// in a nested list, we return a list of indices, representing the positions of the containing lists.
/// For example, if an item was found at position 3 in a list that was itself in position 2 of the
/// target list, we would return (2, 3). If the item is *not* found, return null.
///
/// @example list-has((a, b, c), b) // 2
@function list-has($list, $query, $recursive: false, $fuzzy: false) {
  // type safety
  @if meta.type-of($list) != list { @error 'First argument `$list` must be of type "list"'; }
  @if meta.type-of($recursive) != bool { @error 'Third argument `$recursive` must be of type "bool"'; }
  @if meta.type-of($fuzzy) != bool { @error 'Fourth argument `$fuzzy` must be of type "bool"'; }

  @for $i from 1 through list.length($list) {
    $current: list.nth($list, $i);
    @if meta.type-of($current) == list and $recursive {
      @for $j from 1 through list.length($current) {
        @if string.match(list.nth($current, $j), $query, $exact: not $fuzzy) {
          @return ($i, $j);
        }
      }
    } @else if string.match($current, $query, $exact: not $fuzzy) {
      @return $i;
    }
  }

  @return null;
}

@if config.$debug {
  @debug "@function list-has: #{list-has((1, 2, 3), 3)}"; // expect 3
  @debug "@function list-has: #{list-has((a, b, c, d), b)}"; // expect 2
  @debug "@function list-has: #{list-has((a, (b, c), d), c)}"; // expect null
  @debug "@function list-has: #{list-has((a, (b, c), d), c, $recursive: true)}"; // expect (2, 2)
  @debug "@funciton list-has: #{list-has((1, 2, 3), 4)}"; // expect null
  @debug "@function list-has: #{list-has(("one", "two", "three"), "two")}"; // expect 2
  @debug "@function list-has: #{list-has(("london", "new york", "paris"), "york")}"; // expect null
  @debug "@function list-has: #{list-has(("london", "new york", "paris"), "york", $fuzzy: true)}"; // expect 2
  @debug "@function list-has: #{list-has(("london", ("new york", "washington dc"), "paris"), "york", $recursive: true, $fuzzy: true)}"; // expect (2, 1)
  @debug "----------";
}
